#!/bin/bash
# Puny BuildTools v2.0
# puny CLI - the PunyInform floppy disk factory
# (c) 2023 Stefan Vogt

# initial definitions
zversion=5

echo "puny CLI - the PunyInform floppy disk factory"
echo -e "Puny BuildTools 2.0, (c) 2023 Stefan Vogt\n"

while getopts ':iz:t:haoe' opt; do
  case "$opt" in
    i) # init project directory
      echo -e "initializing project directory [...]\n"
      exit 0
      ;;

    a) # create optimized abbrevations > abbrvs.h
      echo -e "writing abbreviations to abbrvs.h [...]\n"
      ~/FictionTools/Templates/make_abbrvs.sh
      echo
      exit 0
      ;;

    z) # Z-machine version
      arg="$OPTARG"
      if ! (( arg == 3 || arg == 5 )) ; then 
        echo -e "Z-machine version ${arg} is not supported.";
        exit 1;
      fi
      zversion=arg;
      echo "Z-machine version ${OPTARG} defined."
      ;;

    t) # target processing
      if ! [ -f config.sh ] ; then
        echo -e "No config file found in current directory.\n"
        exit 1;
      fi
      arg="$OPTARG"
      echo -e "Processing target '${OPTARG}'\n"
      ./${OPTARG}.sh
      ;;

    h) # help menu
      echo -e "Synopsis: $(basename $0) [-switch] [-zversion value] [-target system]\n"
      echo "[switches]"
      echo "  -i    initialize project directory"
      echo "  -a    create optimized abbreviations"
      echo "  -o    see full range of target systems"
      echo "  -e    show examples"
      echo -e "  -h    help menu\n"
      echo "[zversion value]"
      echo "  -z3    set Z-machine version 3"
      echo "  -z5    set Z-machine version 5 (XZIP)"
      echo -e "  (When not set, Z-machine v5 is applied.)\n"
      echo "[target system]"
      echo -e "  -t    create disk image for the system defined as argument\n"
      exit 0
      ;;

    o) # targets
      echo "Target systems:"
      echo "C64     [-t c64]        Amiga     [-t amiga]      ZX Spectrum  [-t speccy]"
      echo "CPC/PCW [-t cpc_pcw]    Atari ST  [-t atari_st]   Atari 8-bit  [-t a8bit]"
      echo "MS-DOS  [-t dos]        MSX       [-t msx]        BBC/Electron [-t bbc_acorn]"
      echo "C128    [-t c128]       Plus/4    [-t plus4]      Apple II     [-t apple2]"
      echo "SAM     [-t sam_coupe]  TRS M3    [-t trs80_m3]   TRS M4       [-t trs80_m4]"
      echo "Mega65  [-t mega65]     Macintosh [-t macintosh]"
      echo -e "\nDeprecated systems (only supporting Z-machine v3):"
      echo "[-t vic20_pet]    [-t decrainbow]    [-t trs_coco_dragon64]    [-t osborne1]"
      echo -e "[-t ti99]         [-t oric]          [-t kaypro]\n"
      exit 0
      ;;

    e) # examples
      echo "Examples:"
      echo "puny -t c64"
      echo -e "-> builds C64 target in Z-machine v5 format\n"
      echo "puny -t dos -t msx -t amiga"
      echo -e "-> builds DOS, MSX and Amiga targets in Z-machine v5 format\n"
      echo "puny -z3 -t apple2 -t ti99"
      echo -e "-> builds Apple II and TI99/4a targets in Z-machine v3 format\n"
      exit 0
      ;;

    :)
      echo -e "Option [-${OPTARG}] requires an argument.\n\nType: $(basename $0) [-h] for help.\n"
      exit 1
      ;;

    ?)
      echo -e "Invalid command option.\n\nType: $(basename $0) [-h] for help.\n"
      exit 1
      ;;
  esac
done

if [ $OPTIND -eq 1 ]; then echo -e "Nothing to be done. No options passed. Use [-h] for help."; fi
shift "$(($OPTIND -1))"

echo -e
exit 0;